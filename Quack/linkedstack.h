#pragma once

#include "pch.h"

namespace qck
{
	// ========================================================================================================================================
	// Stack
	// ========================================================================================================================================

	template <typename T>
	class LinkedStack
	{
		private:

		// ====================================================================================================================================
		// Node
		// ====================================================================================================================================

		struct Node
		{
			T value;
			Node* next;

			Node(const T& t, Node* n) : value(t), next(n) {}
		};

		Node* last;

		public:

		// ====================================================================================================================================
		// Accessor
		// ====================================================================================================================================

		inline bool isEmpty() const {return last == nullptr;}

		// ====================================================================================================================================
		// Constructor / Destructor
		// ====================================================================================================================================

		LinkedStack()
		{
			last = nullptr;
		}

		~LinkedStack()
		{
			Node *node = last, *temp;

			while (node != nullptr)
			{
				temp = node;
				node = node->next;

				delete temp;
			}
		}

		// ====================================================================================================================================
		// Peek
		// ====================================================================================================================================

		T& peek()
		{
			qckAssert(last != nullptr, "Stack is empty");
			return last->value;
		}

		const T& peek() const
		{
			qckAssert(last != nullptr, "Stack is empty");
			return last->value;
		}

		bool peek(T& result) const
		{
			if (last == nullptr)
				return false;

			result = last->value;

			return true;
		}

		// ====================================================================================================================================
		// Push
		// ====================================================================================================================================

		void push(const T& value)
		{
			last = new Node(value, last);
		}

		// ====================================================================================================================================
		// Pop
		// ====================================================================================================================================

		T pop()
		{
			qckAssert(last != nullptr, "Stack is empty");

			T result	= last->value;
			Node* temp	= last;

			last = last->next;
			delete temp;

			return result;
		}

		bool pop(T& result)
		{
			if (last == nullptr)
				return false;

			Node* temp = last;

			result	= last->value;
			last	= last->next;
			delete temp;

			return true;
		}

		// ====================================================================================================================================
		// Clear
		// ====================================================================================================================================

		void clear()
		{
			Node *node = last, *temp;

			while (node != nullptr)
			{
				temp = node;
				node = node->next;

				delete temp;
			}
		}
	};
}