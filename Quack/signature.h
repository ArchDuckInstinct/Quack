#pragma once

#include "pch.h"
#include "datatype.h"
#include "data.h"

namespace qck::Compilation
{
	// ========================================================================================================================================
	// Signature
	// ========================================================================================================================================

	class Signature
	{
		public:

		// ====================================================================================================================================
		// Type
		// ====================================================================================================================================

		enum class Type
		{
			None,
			Builtin,
			RoutineGlobal,
			RoutineMember,
			RoutineStatic,
			VariableLocal,
			VariableGlobal,
			VariableMember,
			VariableStatic
		};

		// ====================================================================================================================================
		// 
		// ====================================================================================================================================

		DataType dataType;
		std::string identifier;
		std::vector<DataType> parameters;

		// ====================================================================================================================================
		// Constructor / Destructor
		// ====================================================================================================================================

		Signature();
		Signature(const std::string&);
		Signature(const std::string&, const std::vector<DataType>&);
		Signature(DataType, const std::string&, const std::vector<DataType>&);
		Signature(const Signature&);
		~Signature();

		// ====================================================================================================================================
		// Utility
		// ====================================================================================================================================

		static bool compareParameters(const Signature&, const Signature&);
	};

	// ========================================================================================================================================
	// SignatureObject
	// ========================================================================================================================================

	class SignatureObject
	{
		private:

		Signature signature;
		Signature::Type type;

		// Builtin ID / Routine ID / Variable ID
		int id;

		public:

		// ====================================================================================================================================
		// Accessor
		// ====================================================================================================================================

		inline const Signature& getSignature()	{return signature;}
		inline Signature::Type getType()		{return type;}
		inline int getID()						{return id;}

		// ====================================================================================================================================
		// Constructor
		// ====================================================================================================================================

		SignatureObject(const Signature&, Signature::Type, int);
	};

	typedef std::forward_list<SignatureObject> SignatureList;

	// ========================================================================================================================================
	// SignatureMap
	// ========================================================================================================================================

	class SignatureMap
	{
		private:

		std::unordered_map<std::string, SignatureList*> signatures;

		SignatureList* getList(const Signature&);
		SignatureList* getList(const Signature&) const;
		SignatureObject* match(SignatureList*, const Signature&) const;

		public:

		// ====================================================================================================================================
		// Constructor / Destructor
		// ====================================================================================================================================

		SignatureMap();
		~SignatureMap();

		// ====================================================================================================================================
		// Insert
		// ====================================================================================================================================

		void insert(const Signature&, Signature::Type, int);

		// ====================================================================================================================================
		// Search
		// ====================================================================================================================================

		const SignatureObject* search(const std::string&) const;
		const SignatureObject* search(const std::string&, const std::vector<DataType>&) const;
	};
}