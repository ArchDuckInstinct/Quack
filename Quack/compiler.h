#pragma once

#include "pch.h"
#include "parser.h"
#include "instruction.h"
#include "signature.h"

namespace qck::Compilation
{
	// ========================================================================================================================================
	// Logging
	// ========================================================================================================================================


	// ========================================================================================================================================
	// Writer
	// ========================================================================================================================================

	class Writer
	{
		private:

		std::vector<int> instructions;

		public:

		// ====================================================================================================================================
		// Write
		// ====================================================================================================================================

		void write(Runtime::Instruction);
		void write(bool);
		void write(int);
		void write(const std::string&);

		// ====================================================================================================================================
		// CopyTo
		// ====================================================================================================================================

		void copyTo(int*&, int&);

		// ====================================================================================================================================
		// Clear
		// ====================================================================================================================================

		void clear();

		// ====================================================================================================================================
		// Operators
		// ====================================================================================================================================

		Writer& operator <<(Runtime::Instruction);
		Writer& operator <<(bool);
		Writer& operator <<(int);
		Writer& operator <<(const std::string&);
		Writer& operator >>(Routine&);
	};

	// ========================================================================================================================================
	// TokenIterator
	// ========================================================================================================================================

	class TokenIterator
	{
		protected:

		Parser* parser;
		Token tokenCurr;
		Token tokenPrev;
		int scope;

		TokenIterator();

		bool next();

		void expect();
		void expect(Token::Type);
		void expect(Token::Category);

		void escape();
	};

	// ========================================================================================================================================
	// Stack
	// ========================================================================================================================================

	class Stack
	{
		protected:

		// ====================================================================================================================================
		// Types
		// ====================================================================================================================================

		std::forward_list<DataType> types;

		void typePush(DataType);
		DataType typePop();
		DataType typePeek();

		// ====================================================================================================================================
		// Integers
		// ====================================================================================================================================

		std::forward_list<int> integers;

		void intPush(int);
		int intPop();
		int intPeek();

		// ====================================================================================================================================
		// Strings
		// ====================================================================================================================================

		std::forward_list<std::string> strings;

		void strPush(const std::string&);
		std::string strPop();
		std::string strPeek();
	};
}

namespace qck
{
	// ========================================================================================================================================
	// Compiler
	// ========================================================================================================================================

	class Compiler : 
		public Compilation::TokenIterator,
		public Compilation::Stack
	{
		private:

		// ====================================================================================================================================
		// Components
		// ====================================================================================================================================

		Compilation::Signature signature;
		Compilation::SignatureMap signatures;
		Compilation::Writer writer;

		// ====================================================================================================================================
		// Stack
		// ====================================================================================================================================

		void typePush();
		void intPush();
		void strPush();

		// ====================================================================================================================================
		// Prelinking
		// ====================================================================================================================================

		void readSignature();
		void prelink();

		// ====================================================================================================================================
		// Compilation
		// ====================================================================================================================================

		void variable();
		void routine();
		void expression();

		void build();

		int routineCount;

		public:

		std::stringstream log;

		// ====================================================================================================================================
		// Constructor / Destructor
		// ====================================================================================================================================

		Compiler();
		~Compiler();

		// ====================================================================================================================================
		// 
		// ====================================================================================================================================

		bool compile(Parser*);
	};
}